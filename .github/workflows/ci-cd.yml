name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11']
        node-version: ['18.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ==================== Backend Tests ====================
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests (pytest)
        working-directory: ./api
        run: |
          pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=html --cov-report=term
        env:
          MONGODB_URI: mongodb://localhost:27017
          DATABASE_NAME: broncofit_test
          JWT_SECRET_KEY: test-secret-key-for-ci
          JWT_ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 1440

      - name: Upload backend coverage to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./api/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      # ==================== Frontend Tests ====================
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests (Vitest)
        run: npm test -- --coverage
        env:
          VITE_API_URL: http://localhost:8000

      - name: Upload frontend coverage to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Build frontend
        run: npm run build

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            api/coverage.xml
            api/htmlcov/
            coverage/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            api/

# ==================== EC2 Deployment ====================
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy files to EC2 via rsync
        uses: easingthemes/ssh-deploy@v4.1.10
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USER }}
          SOURCE: "./"
          TARGET: "/var/www/broncofit"
          EXCLUDE: "/tests/, /.env, /venv/, /__pycache__/, /.pytest_cache/"

      - name: Run remote commands on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /var/www/broncofit/api
            
            # Activate virtual environment and install dependencies
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Restart the application with PM2
            pm2 restart broncofit-api
            
            echo "âœ… Deployment successful!"